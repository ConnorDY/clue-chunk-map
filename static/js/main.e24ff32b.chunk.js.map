{"version":3,"sources":["utils.ts","components/ChunkTile.tsx","components/forms/ToggleSwitch.tsx","models/Chunk.ts","components/Map.tsx","components/Modal.tsx","reportWebVitals.js","index.js"],"names":["listHasChunk","list","coords","x1","y1","find","x2","y2","createClassString","object","classes","Object","entries","key","push","length","join","undefined","ChunkTile","chunk","onClick","tdRef","showCoords","useRef","mouseDownRef","setMouseDown","d","current","moveDistanceRef","setMoveDistance","resetMouseState","mouseDownHandler","e","button","mouseUpHandler","mouseMoveHandler","a","movementX","b","movementY","Math","sqrt","useEffect","tdEl","addEventListener","className","impossible","chunkData","x","y","ref","ToggleSwitch","checked","children","onChange","type","Chunk","unlocked","this","Map","modal","useState","width","height","chunks","initChunks","selectedChunk","setSelectedChunk","scale","translation","view","setView","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","showSidebar","setShowSideBar","setShowCoords","open","close","minWidthScale","minHeightScale","minScale","value","translationBounds","xMax","yMax","xMin","yMin","id","cellSpacing","cellPadding","map","row","aria-label","target","Modal","onClose","modalElement","document","getElementById","forwardRef","defaultOpened","fade","isOpen","setIsOpen","useCallback","useImperativeHandle","handleEscape","event","keyCode","removeEventListener","createPortal","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e24ff32b.chunk.js","sourcesContent":["export function listHasChunk(list: number[][], coords: number[]): boolean {\n  const [x1, y1] = coords;\n\n  return !!list.find(([x2, y2]) => x1 === x2 && y1 === y2);\n}\n\nexport function createClassString(object: {\n  [className: string]: boolean;\n}): string | undefined {\n  const classes = [];\n\n  for (const [key, value] of Object.entries(object)) {\n    if (value) classes.push(key);\n  }\n\n  return classes.length ? classes.join(' ') : undefined;\n}\n","import { useEffect, useRef } from 'react';\n\nimport chunkData from '../data/chunk_data.json';\nimport { createClassString, listHasChunk } from '../utils';\nimport { Chunk } from '../models';\n\nconst ChunkTile: React.FC<{\n  chunk: Chunk;\n  onClick?: () => void;\n  showCoords?: boolean;\n}> = ({ chunk, onClick, showCoords = false }) => {\n  const tdRef = useRef<HTMLTableDataCellElement>(null);\n\n  // state for when the mouse left button is held down\n  const mouseDownRef = useRef(false);\n  const setMouseDown = (d: boolean) => {\n    mouseDownRef.current = d;\n  };\n\n  // state for how much the mouse has moved while the left button is held down\n  const moveDistanceRef = useRef(0);\n  const setMoveDistance = (d: number) => {\n    moveDistanceRef.current = d;\n  };\n\n  function resetMouseState() {\n    setMoveDistance(0);\n    setMouseDown(false);\n  }\n\n  function mouseDownHandler(e: MouseEvent) {\n    // if the left mouse button was pressed\n    if (e.button === 0) setMouseDown(true);\n  }\n\n  function mouseUpHandler(e: MouseEvent) {\n    // if the left mouse button was released\n    if (mouseDownRef.current && e.button === 0) {\n      // only trigger `onClick` when the user isn't moving the map\n      if (onClick && moveDistanceRef.current <= 10) {\n        onClick();\n      }\n\n      resetMouseState();\n    }\n  }\n\n  function mouseMoveHandler(e: MouseEvent) {\n    // do nothing if the left mouse button isn't held down\n    if (!mouseDownRef.current) return;\n\n    const a = e.movementX;\n    const b = e.movementY;\n\n    setMoveDistance(moveDistanceRef.current + Math.sqrt(a * a + b * b));\n  }\n\n  useEffect(() => {\n    const tdEl = tdRef.current;\n    if (!tdEl) return;\n\n    tdEl.addEventListener('mousedown', mouseDownHandler);\n    tdEl.addEventListener('mouseup', mouseUpHandler);\n\n    tdEl.addEventListener('mousemove', mouseMoveHandler);\n\n    tdEl.addEventListener('mouseenter', resetMouseState);\n    tdEl.addEventListener('mouseleave', resetMouseState);\n  }, [tdRef]);\n\n  return (\n    <td\n      className={createClassString({\n        impossible: listHasChunk(chunkData.impossible, [chunk.x, chunk.y]),\n      })}\n      ref={tdRef}\n    >\n      <div className=\"chunk-tile\">\n        <div className=\"chunk-coords\">\n          ({chunk.x}, {chunk.y})\n        </div>\n      </div>\n    </td>\n  );\n};\n\nexport default ChunkTile;\n","import { ChangeEventHandler, ReactNode } from 'react';\n\nconst ToggleSwitch: React.FC<{\n  checked?: boolean;\n  children: ReactNode;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n}> = ({ checked, children, onChange }) => {\n  return (\n    <label className=\"toggle-switch\">\n      <input checked={checked} type=\"checkbox\" onChange={onChange} />\n      <i />\n      {children}\n    </label>\n  );\n};\n\nexport default ToggleSwitch;\n","export default class Chunk {\n  public x: number;\n  public y: number;\n\n  public unlocked = false;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport { ChunkTile, Modal } from '.';\nimport type { ModalHandle } from '.';\nimport { ToggleSwitch } from './forms';\nimport { Chunk } from '../models';\nimport { createClassString } from '../utils';\n\nfunction initChunks(width: number, height: number): Chunk[][] {\n  const chunks: Chunk[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    chunks.push([]);\n\n    for (let x = 0; x < width; x++) {\n      chunks[y].push(new Chunk(x, y));\n    }\n  }\n\n  return chunks;\n}\n\nexport default function Map() {\n  const width = 43;\n  const height = 25;\n\n  const modal = useRef<ModalHandle>(null);\n\n  // chunk map\n  const [chunks] = useState(initChunks(width, height));\n  const [selectedChunk, setSelectedChunk] = useState<Chunk>();\n\n  // view and window dimensions\n  const [view, setView] = useState({ scale: 1.2, translation: { x: 0, y: 0 } });\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  // settings\n  const [showSidebar, setShowSideBar] = useState(false);\n  const [showCoords, setShowCoords] = useState(false);\n\n  // on load\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  // when chunk is selected or deselected\n  useEffect(() => {\n    if (!modal.current) return;\n\n    if (selectedChunk) {\n      modal.current.open();\n    } else {\n      modal.current.close();\n    }\n  }, [modal, selectedChunk]);\n\n  const { scale } = view;\n\n  const minWidthScale = windowDimensions.width / (width * 192);\n  const minHeightScale = windowDimensions.height / (height * 192);\n\n  const minScale =\n    minWidthScale > minHeightScale ? minWidthScale : minHeightScale;\n\n  return (\n    <>\n      <MapInteractionCSS\n        value={view}\n        onChange={setView}\n        translationBounds={{\n          xMax: 0,\n          yMax: 0,\n          xMin: -(width * 192 * scale) + windowDimensions.width,\n          yMin: -(height * 192 * scale) + windowDimensions.height,\n        }}\n        minScale={minScale}\n      >\n        <table\n          id=\"map\"\n          cellSpacing={0}\n          cellPadding={0}\n          className={createClassString({\n            'show-coords': showCoords,\n            'zoomed-in': scale > 1,\n          })}\n        >\n          <tbody>\n            {chunks.map((row, y) => (\n              <tr key={`row-${y}`}>\n                {row.map((chunk, x) => (\n                  <ChunkTile\n                    chunk={chunk}\n                    onClick={() => setSelectedChunk(chunk)}\n                    key={`chunk-${x}-${y}`}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </MapInteractionCSS>\n\n      <div className=\"controls pin-top-left\">\n        {showSidebar ? (\n          <div id=\"sidebar\">\n            <div className=\"controls pin-top-right\">\n              <button\n                onClick={() => setShowSideBar(false)}\n                aria-label=\"Hide sidebar\"\n              >\n                &lt;\n              </button>\n            </div>\n\n            <form>\n              <ToggleSwitch\n                checked={showCoords}\n                onChange={(e) => setShowCoords(e.target.checked)}\n              >\n                Show Chunk Coords\n              </ToggleSwitch>\n            </form>\n          </div>\n        ) : (\n          <button\n            onClick={() => setShowSideBar(true)}\n            aria-label=\"Show sidebar\"\n          >\n            &gt;\n          </button>\n        )}\n      </div>\n\n      <div className=\"controls pin-bottom-right margin\">\n        <button\n          onClick={() =>\n            setView({ scale: minScale, translation: { x: 0, y: 0 } })\n          }\n        >\n          zoom out\n        </button>\n      </div>\n\n      <Modal onClose={() => setSelectedChunk(undefined)} ref={modal}>\n        <div id=\"chunk-modal\">\n          <h1>\n            Chunk ({selectedChunk?.x}, {selectedChunk?.y})\n          </h1>\n          Placeholder\n        </div>\n      </Modal>\n    </>\n  );\n}\n","import {\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { createClassString } from '../utils';\n\nconst modalElement = document.getElementById('modal-root') as Element;\n\nexport type ModalHandle = { close: () => void; open: () => void };\n\nexport default forwardRef<\n  ModalHandle,\n  {\n    children: ReactNode;\n    defaultOpened?: boolean;\n    fade?: boolean;\n    onClose?: () => void;\n  }\n>(({ children, defaultOpened = false, fade = false, onClose }, ref) => {\n  const [isOpen, setIsOpen] = useState(defaultOpened);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    if (onClose) onClose();\n  }, []);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      open: () => setIsOpen(true),\n      close,\n    }),\n    [close]\n  );\n\n  const handleEscape = useCallback(\n    (event) => {\n      if (event.keyCode === 27) close();\n    },\n    [close]\n  );\n\n  useEffect(() => {\n    if (isOpen) document.addEventListener('keydown', handleEscape, false);\n    return () => {\n      document.removeEventListener('keydown', handleEscape, false);\n    };\n  }, [handleEscape, isOpen]);\n\n  return createPortal(\n    isOpen ? (\n      <div\n        className={createClassString({\n          modal: true,\n          'modal-fade': fade,\n        })}\n      >\n        <div className=\"modal-overlay\" onClick={close} />\n\n        <span\n          role=\"button\"\n          className=\"modal-close\"\n          aria-label=\"close\"\n          onClick={close}\n        >\n          x\n        </span>\n\n        <div className=\"modal-body\">{children}</div>\n      </div>\n    ) : null,\n    modalElement\n  );\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Map } from './components';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}