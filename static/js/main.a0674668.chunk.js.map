{"version":3,"sources":["components/ClueTable.tsx","components/ChunkModal.tsx","utils.ts","components/ChunkTile.tsx","components/forms/ToggleSwitch.tsx","models/MapChunk.ts","components/Map.tsx","components/Modal.tsx","reportWebVitals.js","index.js"],"names":["ClueTable","clues","type","ClueHint","hint","startsWith","src","length","map","clueHint","itemsRequired","location","solution","join","ChunkModal","chunk","id","x","y","beginnerClues","easyClues","mediumClues","hardClues","eliteClues","masterClues","chunkData","getChunk","find","chunkHasClues","clueCount","beginner","easy","medium","hard","elite","master","clueCountsForChunk","Object","values","createClassString","object","classes","entries","key","push","undefined","ChunkTile","onClick","tdRef","useRef","mouseDownRef","setMouseDown","d","current","moveDistanceRef","setMoveDistance","resetMouseState","mouseDownHandler","e","button","mouseUpHandler","mouseMoveHandler","a","movementX","b","movementY","Math","sqrt","useEffect","tdEl","addEventListener","className","impossible","ref","ToggleSwitch","checked","children","onChange","MapChunk","unlocked","this","Map","modal","useState","width","height","chunks","initChunks","selectedChunk","setSelectedChunk","scale","translation","view","setView","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","showSidebar","setShowSideBar","showCoords","setShowCoords","open","close","minWidthScale","minHeightScale","minScale","selectedChunkData","value","translationBounds","xMax","yMax","xMin","yMin","cellSpacing","cellPadding","row","aria-label","target","Modal","onClose","modalElement","document","getElementById","forwardRef","defaultOpened","fade","isOpen","setIsOpen","useCallback","useImperativeHandle","handleEscape","event","keyCode","removeEventListener","createPortal","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a0674668.chunk.js","sourcesContent":["import { Clue } from '../models';\n\nconst ClueTable: React.FC<{ clues: Clue[] | undefined; type: string }> = ({\n  clues,\n  type,\n}) => {\n  const ClueHint = ({ hint }: { hint: string }) => {\n    return hint.startsWith('http') ? <img src={hint} /> : <>{hint}</>;\n  };\n\n  return clues && clues.length ? (\n    <>\n      <h2>{type} Clues</h2>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Type</th>\n            <th>Clue</th>\n            <th>Solution</th>\n            <th>Location</th>\n            <th>Items</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {clues.map(\n            ({ clueHint, itemsRequired, location, solution, type }) => (\n              <tr key={clueHint}>\n                <td>{type}</td>\n                <td>\n                  <ClueHint hint={clueHint} />\n                </td>\n                <td>{solution}</td>\n                <td>{location}</td>\n                <td>{itemsRequired?.join(', ')}</td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </>\n  ) : (\n    <></>\n  );\n};\n\nexport default ClueTable;\n","import ClueTable from './ClueTable';\nimport type { ChunkData } from '../models';\n\nconst ChunkModal: React.FC<{ chunk: ChunkData }> = ({ chunk }) => {\n  return (\n    <div id=\"chunk-modal\">\n      <h1>\n        Chunk ({chunk.x}, {chunk.y})\n      </h1>\n\n      <ClueTable clues={chunk.beginnerClues} type=\"Beginner\" />\n      <ClueTable clues={chunk.easyClues} type=\"Easy\" />\n      <ClueTable clues={chunk.mediumClues} type=\"Medium\" />\n      <ClueTable clues={chunk.hardClues} type=\"Hard\" />\n      <ClueTable clues={chunk.eliteClues} type=\"Elite\" />\n      <ClueTable clues={chunk.masterClues} type=\"Master\" />\n    </div>\n  );\n};\n\nexport default ChunkModal;\n","import type { ChunkData } from './models';\nimport chunkJson from './data/chunk_data.json';\n\nconst chunkData = chunkJson as ChunkData[];\n\nexport function getChunk(x: number, y: number): ChunkData | undefined {\n  return chunkData.find((chunk) => chunk.x === x && chunk.y === y);\n}\n\nexport function clueCountsForChunk(chunk: ChunkData | undefined) {\n  return {\n    beginner: chunk?.beginnerClues?.length || 0,\n    easy: chunk?.easyClues?.length || 0,\n    medium: chunk?.mediumClues?.length || 0,\n    hard: chunk?.hardClues?.length || 0,\n    elite: chunk?.eliteClues?.length || 0,\n    master: chunk?.masterClues?.length || 0,\n  };\n}\n\nexport function chunkHasClues(chunk: ChunkData | undefined): boolean {\n  const clueCount = clueCountsForChunk(chunk);\n\n  for (const count of Object.values(clueCount)) {\n    if (count) return true;\n  }\n\n  return false;\n}\n\nexport function createClassString(object: {\n  [className: string]: boolean;\n}): string | undefined {\n  const classes = [];\n\n  for (const [key, value] of Object.entries(object)) {\n    if (value) classes.push(key);\n  }\n\n  return classes.length ? classes.join(' ') : undefined;\n}\n","import { useEffect, useRef } from 'react';\n\nimport { chunkHasClues, createClassString, getChunk } from '../utils';\nimport { MapChunk } from '../models';\n\nconst ChunkTile: React.FC<{\n  chunk: MapChunk;\n  onClick?: () => void;\n}> = ({ chunk, onClick }) => {\n  const chunkData = getChunk(chunk.x, chunk.y);\n\n  const tdRef = useRef<HTMLTableDataCellElement>(null);\n\n  // state for when the mouse left button is held down\n  const mouseDownRef = useRef(false);\n  const setMouseDown = (d: boolean) => {\n    mouseDownRef.current = d;\n  };\n\n  // state for how much the mouse has moved while the left button is held down\n  const moveDistanceRef = useRef(0);\n  const setMoveDistance = (d: number) => {\n    moveDistanceRef.current = d;\n  };\n\n  function resetMouseState() {\n    setMoveDistance(0);\n    setMouseDown(false);\n  }\n\n  function mouseDownHandler(e: MouseEvent) {\n    // if the left mouse button was pressed\n    if (e.button === 0) setMouseDown(true);\n  }\n\n  function mouseUpHandler(e: MouseEvent) {\n    // if the left mouse button was released\n    if (mouseDownRef.current && e.button === 0) {\n      // only trigger `onClick` when the user isn't moving the map\n      if (onClick && moveDistanceRef.current <= 10) {\n        onClick();\n      }\n\n      resetMouseState();\n    }\n  }\n\n  function mouseMoveHandler(e: MouseEvent) {\n    // do nothing if the left mouse button isn't held down\n    if (!mouseDownRef.current) return;\n\n    const a = e.movementX;\n    const b = e.movementY;\n\n    setMoveDistance(moveDistanceRef.current + Math.sqrt(a * a + b * b));\n  }\n\n  useEffect(() => {\n    const tdEl = tdRef.current;\n    if (!tdEl) return;\n\n    tdEl.addEventListener('mousedown', mouseDownHandler);\n    tdEl.addEventListener('mouseup', mouseUpHandler);\n\n    tdEl.addEventListener('mousemove', mouseMoveHandler);\n\n    tdEl.addEventListener('mouseenter', resetMouseState);\n    tdEl.addEventListener('mouseleave', resetMouseState);\n  }, [tdRef]);\n\n  return (\n    <td\n      className={createClassString({\n        impossible: !chunkHasClues(chunkData),\n      })}\n      ref={tdRef}\n    >\n      <div className=\"chunk-tile\">\n        <div className=\"chunk-coords\">\n          ({chunk.x}, {chunk.y})\n        </div>\n      </div>\n    </td>\n  );\n};\n\nexport default ChunkTile;\n","import { ChangeEventHandler, ReactNode } from 'react';\n\nconst ToggleSwitch: React.FC<{\n  checked?: boolean;\n  children: ReactNode;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n}> = ({ checked, children, onChange }) => {\n  return (\n    <label className=\"toggle-switch\">\n      <input checked={checked} type=\"checkbox\" onChange={onChange} />\n      <i />\n      <span>{children}</span>\n    </label>\n  );\n};\n\nexport default ToggleSwitch;\n","export default class MapChunk {\n  public x: number;\n  public y: number;\n\n  public unlocked = false;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport { ChunkTile, Modal } from '.';\nimport type { ModalHandle } from '.';\nimport { ToggleSwitch } from './forms';\nimport { ChunkData, MapChunk } from '../models';\nimport { createClassString, getChunk } from '../utils';\nimport ChunkModal from './ChunkModal';\n\nfunction initChunks(width: number, height: number): MapChunk[][] {\n  const chunks: MapChunk[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    chunks.push([]);\n\n    for (let x = 0; x < width; x++) {\n      chunks[y].push(new MapChunk(x, y));\n    }\n  }\n\n  return chunks;\n}\n\nexport default function Map() {\n  const width = 43;\n  const height = 25;\n\n  const modal = useRef<ModalHandle>(null);\n\n  // chunk map\n  const [chunks] = useState(initChunks(width, height));\n  const [selectedChunk, setSelectedChunk] = useState<MapChunk>();\n\n  // view and window dimensions\n  const [view, setView] = useState({ scale: 1.2, translation: { x: 0, y: 0 } });\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  // settings\n  const [showSidebar, setShowSideBar] = useState(false);\n  const [showCoords, setShowCoords] = useState(false);\n\n  // on load\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  // when chunk is selected or deselected\n  useEffect(() => {\n    if (!modal.current) return;\n\n    if (selectedChunk) {\n      modal.current.open();\n    } else {\n      modal.current.close();\n    }\n  }, [modal, selectedChunk]);\n\n  // min scale calculations\n  const { scale } = view;\n\n  const minWidthScale = windowDimensions.width / (width * 192);\n  const minHeightScale = windowDimensions.height / (height * 192);\n\n  const minScale =\n    minWidthScale > minHeightScale ? minWidthScale : minHeightScale;\n\n  // get selected chunk data\n  const selectedChunkData = selectedChunk\n    ? getChunk(selectedChunk.x, selectedChunk.y)\n    : undefined;\n\n  return (\n    <>\n      <MapInteractionCSS\n        value={view}\n        onChange={setView}\n        translationBounds={{\n          xMax: 0,\n          yMax: 0,\n          xMin: -(width * 192 * scale) + windowDimensions.width,\n          yMin: -(height * 192 * scale) + windowDimensions.height,\n        }}\n        minScale={minScale}\n      >\n        <table\n          id=\"map\"\n          cellSpacing={0}\n          cellPadding={0}\n          className={createClassString({\n            'show-coords': showCoords,\n            'zoomed-in': scale > 1,\n          })}\n        >\n          <tbody>\n            {chunks.map((row, y) => (\n              <tr key={`row-${y}`}>\n                {row.map((chunk, x) => (\n                  <ChunkTile\n                    chunk={chunk}\n                    onClick={() => setSelectedChunk(chunk)}\n                    key={`chunk-${x}-${y}`}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </MapInteractionCSS>\n\n      <div className=\"controls pin-top-left\">\n        {showSidebar ? (\n          <div id=\"sidebar\">\n            <div className=\"controls pin-top-right\">\n              <button\n                onClick={() => setShowSideBar(false)}\n                aria-label=\"Hide sidebar\"\n              >\n                &lt;\n              </button>\n            </div>\n\n            <form>\n              <h1>Settings</h1>\n\n              <ToggleSwitch\n                checked={showCoords}\n                onChange={(e) => setShowCoords(e.target.checked)}\n              >\n                Show Chunk Coords\n              </ToggleSwitch>\n            </form>\n          </div>\n        ) : (\n          <button\n            onClick={() => setShowSideBar(true)}\n            aria-label=\"Show sidebar\"\n          >\n            &gt;\n          </button>\n        )}\n      </div>\n\n      <div className=\"controls pin-bottom-right margin\">\n        <button\n          onClick={() =>\n            setView({ scale: minScale, translation: { x: 0, y: 0 } })\n          }\n        >\n          zoom out\n        </button>\n      </div>\n\n      <Modal onClose={() => setSelectedChunk(undefined)} ref={modal}>\n        <ChunkModal\n          chunk={\n            selectedChunkData ? selectedChunkData : (selectedChunk as ChunkData)\n          }\n        />\n      </Modal>\n    </>\n  );\n}\n","import {\n  forwardRef,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { createClassString } from '../utils';\n\nconst modalElement = document.getElementById('modal-root') as Element;\n\nexport type ModalHandle = { close: () => void; open: () => void };\n\nexport default forwardRef<\n  ModalHandle,\n  {\n    children: ReactNode;\n    defaultOpened?: boolean;\n    fade?: boolean;\n    onClose?: () => void;\n  }\n>(({ children, defaultOpened = false, fade = false, onClose }, ref) => {\n  const [isOpen, setIsOpen] = useState(defaultOpened);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n    if (onClose) onClose();\n  }, []);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      open: () => setIsOpen(true),\n      close,\n    }),\n    [close]\n  );\n\n  const handleEscape = useCallback(\n    (event) => {\n      if (event.keyCode === 27) close();\n    },\n    [close]\n  );\n\n  useEffect(() => {\n    if (isOpen) document.addEventListener('keydown', handleEscape, false);\n    return () => {\n      document.removeEventListener('keydown', handleEscape, false);\n    };\n  }, [handleEscape, isOpen]);\n\n  return createPortal(\n    isOpen ? (\n      <div\n        className={createClassString({\n          modal: true,\n          'modal-fade': fade,\n        })}\n      >\n        <div className=\"modal-overlay\" onClick={close} />\n\n        <span\n          role=\"button\"\n          className=\"modal-close\"\n          aria-label=\"close\"\n          onClick={close}\n        >\n          x\n        </span>\n\n        <div className=\"modal-body\">{children}</div>\n      </div>\n    ) : null,\n    modalElement\n  );\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Map } from './components';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}