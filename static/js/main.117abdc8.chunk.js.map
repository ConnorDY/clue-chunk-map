{"version":3,"sources":["Chunk.ts","Map.tsx","reportWebVitals.js","index.js"],"names":["Chunk","unlocked","Map","useState","width","height","chunks","y","push","x","initChunks","minScale","limitToBounds","id","cellSpacing","cellPadding","map","row","chunk","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAqBA,E,sCACZC,UAAW,G,OCkBL,SAASC,IACtB,IAD4B,EAIAC,mBAlB9B,SAAoBC,EAAeC,GAGjC,IAFA,IAAMC,EAAoB,GAEjBC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/BD,EAAOE,KAAK,IAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACzBH,EAAOC,GAAGC,KAAK,IAAIR,GAIvB,OAAOM,EAO8BI,CAHvB,GACC,KAFa,mBAIrBJ,EAJqB,UAM5B,OACE,cAAC,IAAD,CAAkBK,SAAU,GAAKC,eAAe,EAAhD,SACE,cAAC,IAAD,UACE,uBAAOC,GAAG,MAAMC,YAAa,EAAGC,YAAa,EAA7C,SACE,gCACGT,EAAOU,KAAI,SAACC,EAAKV,GAAN,OACV,6BACGU,EAAID,KAAI,SAACE,EAAOT,GAAR,OACP,sCAAkBA,EAAlB,YAAuBF,QAF3B,cAAgBA,eC/B9B,IAYeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5B,EAAD,MAEF6B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.117abdc8.chunk.js","sourcesContent":["export default class Chunk {\n  public unlocked = false;\n}\n","import { useState } from 'react';\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';\n\nimport Chunk from './Chunk';\n\nfunction initChunks(width: number, height: number) {\n  const chunks: Chunk[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    chunks.push([]);\n\n    for (let x = 0; x < width; x++) {\n      chunks[y].push(new Chunk());\n    }\n  }\n\n  return chunks;\n}\n\nexport default function Map() {\n  const width = 43;\n  const height = 25;\n\n  const [chunks, setChunks] = useState(initChunks(width, height));\n\n  return (\n    <TransformWrapper minScale={0.1} limitToBounds={false}>\n      <TransformComponent>\n        <table id=\"map\" cellSpacing={0} cellPadding={0}>\n          <tbody>\n            {chunks.map((row, y) => (\n              <tr key={`row-${y}`}>\n                {row.map((chunk, x) => (\n                  <td key={`chunk-${x}-${y}`}></td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </TransformComponent>\n    </TransformWrapper>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Map from './Map';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}