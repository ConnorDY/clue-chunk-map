{"version":3,"sources":["forms/ToggleSwitch.tsx","utils.ts","models/Chunk.ts","Map.tsx","reportWebVitals.js","index.js"],"names":["ToggleSwitch","checked","children","onChange","className","type","listHasChunk","list","coords","x1","y1","find","x2","y2","Chunk","unlocked","Map","useState","width","height","chunks","y","push","x","initChunks","scale","translation","view","setView","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","showSidebar","setShowSideBar","showCoords","setShowCoords","useEffect","addEventListener","minWidthScale","minHeightScale","minScale","value","translationBounds","xMax","yMax","xMin","yMin","id","cellSpacing","cellPadding","map","row","chunk","chunkData","impossible","undefined","onClick","aria-label","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAgBeA,EAVV,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACzB,OACE,wBAAOC,UAAU,gBAAjB,UACE,uBAAOH,QAASA,EAASI,KAAK,WAAWF,SAAUA,IACnD,sBACCD,MCXA,SAASI,EAAaC,EAAkBC,GAA4B,IAAD,cACrDA,EADqD,GAC/DC,EAD+D,KAC3DC,EAD2D,KAGtE,QAASH,EAAKI,MAAK,mCAAEC,EAAF,KAAMC,EAAN,YAAcJ,IAAOG,GAAMF,IAAOG,K,WCHpCC,E,sCACZC,UAAW,G,OCqBL,SAASC,IACtB,IAD4B,EAKAC,mBAnB9B,SAAoBC,EAAeC,GAGjC,IAFA,IAAMC,EAAoB,GAEjBC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/BD,EAAOE,KAAK,IAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACzBH,EAAOC,GAAGC,KAAK,IAAIR,GAIvB,OAAOM,EAQ8BI,CAJvB,GACC,KAFa,mBAKrBJ,EALqB,aAQJH,mBAAS,CAAEQ,MAAO,IAAKC,YAAa,CAAEH,EAAG,EAAGF,EAAG,MAR3C,mBAQrBM,EARqB,KAQfC,EARe,OASoBX,mBAAS,CACvDC,MAAOW,OAAOC,WACdX,OAAQU,OAAOE,cAXW,mBASrBC,EATqB,KASHC,EATG,OAeUhB,oBAAS,GAfnB,mBAerBiB,EAfqB,KAeRC,EAfQ,OAgBQlB,oBAAS,GAhBjB,mBAgBrBmB,EAhBqB,KAgBTC,EAhBS,KAkB5BC,qBAAU,WAQRT,OAAOU,iBAAiB,UAPxB,WACEN,EAAoB,CAClBf,MAAOW,OAAOC,WACdX,OAAQU,OAAOE,mBAKlB,IA3ByB,IA6BpBN,EAAUE,EAAVF,MAEFe,EAAgBR,EAAiBd,MAAjB,KAChBuB,EAAiBT,EAAiBb,OAAjB,KAEjBuB,EACJF,EAAgBC,EAAiBD,EAAgBC,EAEnD,OACE,qCACE,cAAC,oBAAD,CACEE,MAAOhB,EACPxB,SAAUyB,EACVgB,kBAAmB,CACjBC,KAAM,EACNC,KAAM,EACNC,MAAQ7B,KAAcO,EAASO,EAAiBd,MAChD8B,MAAQ7B,KAAeM,EAASO,EAAiBb,QAEnDuB,SAAUA,EATZ,SAWE,uBACEO,GAAG,MACHC,YAAa,EACbC,YAAa,EACb/C,UAAWqB,EAAQ,EAAI,YAAc,GAJvC,SAME,gCACGL,EAAOgC,KAAI,SAACC,EAAKhC,GAAN,OACV,6BACGgC,EAAID,KAAI,SAACE,EAAO/B,GAAR,OACP,oBACEnB,UACEE,EAAaiD,EAAUC,WAAY,CAACjC,EAAGF,IACnC,kBACAoC,EAJR,SAQGrB,GACC,yCACIb,EADJ,KACSF,EADT,QATJ,gBAMgBE,EANhB,YAMqBF,QARzB,cAAgBA,aAuBxB,qBAAKjB,UAAU,wBAAf,SACG8B,EACC,sBAAKe,GAAG,UAAR,UACE,qBAAK7C,UAAU,yBAAf,SACE,wBACEsD,QAAS,kBAAMvB,GAAe,IAC9BwB,aAAW,eAFb,iBAQF,+BACE,cAAC,EAAD,CACE1D,QAASmC,EACTjC,SAAU,SAACyD,GAAD,OAAOvB,EAAcuB,EAAEC,OAAO5D,UAF1C,oCASJ,wBACEyD,QAAS,kBAAMvB,GAAe,IAC9BwB,aAAW,eAFb,iBASJ,qBAAKvD,UAAU,mCAAf,SACE,wBACEsD,QAAS,kBACP9B,EAAQ,CAAEH,MAAOiB,EAAUhB,YAAa,CAAEH,EAAG,EAAGF,EAAG,MAFvD,2BCvIR,IAYeyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzD,EAAD,MAEF0D,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e4d18c5d.chunk.js","sourcesContent":["import { ChangeEventHandler, ReactNode } from 'react';\n\nconst ToggleSwitch: React.FC<{\n  checked?: boolean;\n  children: ReactNode;\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n}> = ({ checked, children, onChange }) => {\n  return (\n    <label className=\"toggle-switch\">\n      <input checked={checked} type=\"checkbox\" onChange={onChange} />\n      <i />\n      {children}\n    </label>\n  );\n};\n\nexport default ToggleSwitch;\n","export function listHasChunk(list: number[][], coords: number[]): boolean {\n    const [x1, y1] = coords;\n\n    return !!list.find(([x2, y2]) => x1 === x2 && y1 === y2);\n}\n","export default class Chunk {\n  public unlocked = false;\n}\n","import { useEffect, useState } from 'react';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport { ToggleSwitch } from './forms';\nimport { listHasChunk } from './utils';\nimport { Chunk } from './models';\nimport chunkData from './data/chunk_data.json';\n\nfunction initChunks(width: number, height: number): Chunk[][] {\n  const chunks: Chunk[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    chunks.push([]);\n\n    for (let x = 0; x < width; x++) {\n      chunks[y].push(new Chunk());\n    }\n  }\n\n  return chunks;\n}\n\nexport default function Map() {\n  const width = 43;\n  const height = 25;\n\n  // chunk map\n  const [chunks, setChunks] = useState(initChunks(width, height));\n\n  // view and window dimensions\n  const [view, setView] = useState({ scale: 1.2, translation: { x: 0, y: 0 } });\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  // settings\n  const [showSidebar, setShowSideBar] = useState(false);\n  const [showCoords, setShowCoords] = useState(false);\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  const { scale } = view;\n\n  const minWidthScale = windowDimensions.width / (width * 192);\n  const minHeightScale = windowDimensions.height / (height * 192);\n\n  const minScale =\n    minWidthScale > minHeightScale ? minWidthScale : minHeightScale;\n\n  return (\n    <>\n      <MapInteractionCSS\n        value={view}\n        onChange={setView}\n        translationBounds={{\n          xMax: 0,\n          yMax: 0,\n          xMin: -(width * 192 * scale) + windowDimensions.width,\n          yMin: -(height * 192 * scale) + windowDimensions.height,\n        }}\n        minScale={minScale}\n      >\n        <table\n          id=\"map\"\n          cellSpacing={0}\n          cellPadding={0}\n          className={scale > 1 ? 'zoomed-in' : ''}\n        >\n          <tbody>\n            {chunks.map((row, y) => (\n              <tr key={`row-${y}`}>\n                {row.map((chunk, x) => (\n                  <td\n                    className={\n                      listHasChunk(chunkData.impossible, [x, y])\n                        ? 'impossible'\n                        : undefined\n                    }\n                    key={`chunk-${x}-${y}`}\n                  >\n                    {showCoords && (\n                      <>\n                        ({x}, {y})\n                      </>\n                    )}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </MapInteractionCSS>\n\n      <div className=\"controls pin-top-left\">\n        {showSidebar ? (\n          <div id=\"sidebar\">\n            <div className=\"controls pin-top-right\">\n              <button\n                onClick={() => setShowSideBar(false)}\n                aria-label=\"Hide sidebar\"\n              >\n                &lt;\n              </button>\n            </div>\n\n            <form>\n              <ToggleSwitch\n                checked={showCoords}\n                onChange={(e) => setShowCoords(e.target.checked)}\n              >\n                Show Chunk Coords\n              </ToggleSwitch>\n            </form>\n          </div>\n        ) : (\n          <button\n            onClick={() => setShowSideBar(true)}\n            aria-label=\"Show sidebar\"\n          >\n            &gt;\n          </button>\n        )}\n      </div>\n\n      <div className=\"controls pin-bottom-right margin\">\n        <button\n          onClick={() =>\n            setView({ scale: minScale, translation: { x: 0, y: 0 } })\n          }\n        >\n          zoom out\n        </button>\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Map from './Map';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}