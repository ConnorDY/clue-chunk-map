{"version":3,"sources":["Chunk.ts","Map.tsx","reportWebVitals.js","index.js"],"names":["Chunk","unlocked","Map","useState","width","height","chunks","y","push","x","initChunks","scale","translation","view","setView","window","innerWidth","innerHeight","dimensions","setDimensions","useEffect","addEventListener","minScale","value","onChange","translationBounds","xMax","yMax","xMin","yMin","id","cellSpacing","cellPadding","className","map","row","chunk","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAqBA,E,sCACZC,UAAW,G,OCkBL,SAASC,IACtB,IAD4B,EAIAC,mBAlB9B,SAAoBC,EAAeC,GAGjC,IAFA,IAAMC,EAAoB,GAEjBC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/BD,EAAOE,KAAK,IAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACzBH,EAAOC,GAAGC,KAAK,IAAIR,GAIvB,OAAOM,EAO8BI,CAHvB,GACC,KAFa,mBAIrBJ,EAJqB,aAKJH,mBAAS,CAAEQ,MAAO,EAAGC,YAAa,CAAEH,EAAG,EAAGF,EAAG,MALzC,mBAKrBM,EALqB,KAKfC,EALe,OAMQX,mBAAS,CAC3CC,MAAOW,OAAOC,WACdX,OAAQU,OAAOE,cARW,mBAMrBC,EANqB,KAMTC,EANS,KAW5BC,qBAAU,WAQRL,OAAOM,iBAAiB,UAPxB,WACEF,EAAc,CACZf,MAAOW,OAAOC,WACdX,OAAQU,OAAOE,mBAKlB,IApByB,IAsBpBN,EAAUE,EAAVF,MAEFW,EAAWJ,EAAWd,MAAX,KAEjB,OACE,qCACE,cAAC,oBAAD,CACEmB,MAAOV,EACPW,SAAUV,EACVW,kBAAmB,CACjBC,KAAM,EACNC,KAAM,EACNC,MAAQxB,KAAcO,EAASO,EAAWd,MAC1CyB,MAAQxB,KAAeM,EAASO,EAAWb,QAE7CiB,SAAUA,EATZ,SAWE,uBACEQ,GAAG,MACHC,YAAa,EACbC,YAAa,EACbC,UAAWtB,EAAQ,EAAI,YAAc,GAJvC,SAME,gCACGL,EAAO4B,KAAI,SAACC,EAAK5B,GAAN,OACV,6BACG4B,EAAID,KAAI,SAACE,EAAO3B,GAAR,OACP,sCAAkBA,EAAlB,YAAuBF,QAF3B,cAAgBA,aAUxB,qBAAKuB,GAAG,WAAR,SACE,wBACEO,QAAS,kBACPvB,EAAQ,CAAEH,MAAOW,EAAUV,YAAa,CAAEH,EAAG,EAAGF,EAAG,MAFvD,2BC7ER,IAYe+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/C,EAAD,MAEFgD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a582345f.chunk.js","sourcesContent":["export default class Chunk {\n  public unlocked = false;\n}\n","import { useEffect, useState } from 'react';\nimport { MapInteractionCSS } from 'react-map-interaction';\n\nimport Chunk from './Chunk';\n\nfunction initChunks(width: number, height: number) {\n  const chunks: Chunk[][] = [];\n\n  for (let y = 0; y < height; y++) {\n    chunks.push([]);\n\n    for (let x = 0; x < width; x++) {\n      chunks[y].push(new Chunk());\n    }\n  }\n\n  return chunks;\n}\n\nexport default function Map() {\n  const width = 43;\n  const height = 25;\n\n  const [chunks, setChunks] = useState(initChunks(width, height));\n  const [view, setView] = useState({ scale: 1, translation: { x: 0, y: 0 } });\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    function handleResize() {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  const { scale } = view;\n\n  const minScale = dimensions.width / (width * 192);\n\n  return (\n    <>\n      <MapInteractionCSS\n        value={view}\n        onChange={setView}\n        translationBounds={{\n          xMax: 0,\n          yMax: 0,\n          xMin: -(width * 192 * scale) + dimensions.width,\n          yMin: -(height * 192 * scale) + dimensions.height,\n        }}\n        minScale={minScale}\n      >\n        <table\n          id=\"map\"\n          cellSpacing={0}\n          cellPadding={0}\n          className={scale > 1 ? 'zoomed-in' : ''}\n        >\n          <tbody>\n            {chunks.map((row, y) => (\n              <tr key={`row-${y}`}>\n                {row.map((chunk, x) => (\n                  <td key={`chunk-${x}-${y}`}></td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </MapInteractionCSS>\n\n      <div id=\"controls\">\n        <button\n          onClick={() =>\n            setView({ scale: minScale, translation: { x: 0, y: 0 } })\n          }\n        >\n          zoom out\n        </button>\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Map from './Map';\nimport reportWebVitals from './reportWebVitals';\n\nimport './Styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}